* Polybar
** Config

#+begin_src conf :tangle ./.config/polybar/config.ini
;==========================================================
;
; THIS IS AN EXAMPLE CONFIGURATION FILE!
; IT IS NOT SUPPOSED TO WORK OUT OF THE BOX SINCE IS CONTAINS
; SETTINGS THAT ARE SPECIFIC TO THE MACHINE WHICH WAS USED
; TO GENERATE IT.
; Please refer to the web documentation hosted at:
; https://github.com/polybar/polybar#configuration
; and
; https://github.com/polybar/polybar/wiki/Configuration
; if you want to automatically generate one for you.
;
;==========================================================
;
;
;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗
;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗
;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝
;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗
;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║
;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
;
;
;   To learn more about how to configure Polybar
;   go to https://github.com/polybar/polybar
;
;   The README contains a lot of information
;
;==========================================================

[colors]
;background = ${xrdb:color0:#222}
background = #bb1c1542
background-alt = #E6020016
;foreground = ${xrdb:color7:#222}
foreground = #f6f6f6f
foreground-alt = #afafaf
primary = #ffb52a
secondary = #ff2afc
alert = #bd2c40

[bar/example]
monitor = ${env:MONITOR:HDMI-1}
width = 100%
height = 27
;offset-x = 1%
;offset-y = 1%
;radius = 6.0
fixed-center = false

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 3
line-color = #f00

;border-size = 4
;border-color = #00000000

padding-left = 2
padding-right = 2

module-margin-left = 1
module-margin-right = 2

font-0 = InconsolataGo Nerd Font Mono:style=Bold:pixelsize=13;1
font-1 = InconsolataGo Nerd Font Mono:style=Bold:pixelsize=18;2
font-2 = InconsolataGo Nerd Font Mono:style=Bold:pixelsize=32;7
font-3 = unifont:fontformat=truetype:size=13:antialias=false;0
font-4 = siji:pixelsize=13;1

modules-left = startmenu mpd
;modules-center = filesystem pulseaudio eth cpu memory temperature date
modules-right = filesystem pulseaudio eth cpu memory temperature date powermenu 

tray-position = center
tray-padding = 2
;tray-background = #0063ff

;wm-restack = bspwm
;wm-restack = i3

;override-redirect = true

;scroll-up = bspwm-desknext
;scroll-down = bspwm-deskprev

;scroll-up = i3wm-wsnext
;scroll-down = i3wm-wsprev

cursor-click = pointer
cursor-scroll = ns-resize

[module/xwindow]
type = internal/xwindow
label = %title:0:30:...%

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-prefix-underline = ${colors.secondary}

label-layout = %layout%
label-layout-underline = ${colors.secondary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-background = ${colors.secondary}
label-indicator-underline = ${colors.secondary}

[module/filesystem]
type = internal/fs
interval = 25

mount-0 = /

label-mounted = %{F#0a81f5}Disk: %free% / %total% 
label-unmounted = %mountpoint% not mounted
label-unmounted-foreground = ${colors.foreground-alt}

[module/mpd]
type = internal/mpd
format-online = <label-song>  <icon-prev> <icon-stop> <toggle> <icon-next>

icon-prev = < 
icon-stop = S
icon-play = P
icon-pause = ||
icon-next = >

label-song-maxlen = 25
label-song-ellipsis = true

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = "CPU "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #f90000
label = %percentage:2%%

[module/memory]
type = internal/memory
interval = 2
format-prefix = "RAM "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #4bffdc
label = %percentage_used%%

[module/wlan]
type = internal/network
interface = wlp59s0
interval = 3.0

format-connected = <ramp-signal> <label-connected>
format-connected-underline = #9f78e1
label-connected = %essid%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

;ramp-signal-0 = 
;ramp-signal-1 = 
;ramp-signal-2 = 
;ramp-signal-3 = 
;ramp-signal-4 = 
ramp-signal-foreground = ${colors.foreground-alt}

[module/eth]
type = internal/network
interface = eno1
interval = 3.0

format-connected-underline = #55aa55
;format-connected-prefix = "%ifname% "
format-connected-prefix-foreground = ${colors.foreground-alt}
label-connected =%ifname%:%upspeed:9% %downspeed:9%
label-connected-exec =%ifname%:%local_ip%
label-disconnected = not connected

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

[module/date]
type = internal/date
interval = 5

date =
date-alt = "%Y-%m-%d"

time = %H:%M
time-alt = %H:%M:%S

format-prefix = 
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #0a6cf5

label = %date% %time%

[module/pulseaudio]
type = internal/pulseaudio

format-volume = <label-volume> 
label-volume = VOL %percentage%%
label-volume-foreground = ${root.foreground}

label-muted =  muted
label-muted-foreground = #666

bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-fill = ─
bar-volume-fill-font = 2
bar-volume-empty = ─
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}

[module/alsa]
type = internal/alsa

format-volume = <label-volume> <bar-volume>
label-volume = VOL
label-volume-foreground = ${root.foreground}

format-muted-prefix = " "
format-muted-foreground = ${colors.foreground-alt}
label-muted = sound muted

bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-fill = ─
bar-volume-fill-font = 2
bar-volume-empty = ─
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}

[module/battery]
type = internal/battery
battery = BAT0
adapter = AC
full-at = 98

format-charging = <animation-charging> <label-charging>
format-charging-underline = #ffb52a

format-discharging = <animation-discharging> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

;format-full-prefix = " "
format-full-prefix-foreground = ${colors.foreground-alt}
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 =  
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 
ramp-capacity-5 = 
ramp-capacity-6 = 
ramp-capacity-7 = 
ramp-capacity-8 = 
ramp-capacity-9 = 
ramp-capacity-foreground = ${colors.foreground-alt}

animation-charging-0 = 
animation-charging-foreground = ${colors.foreground-alt}
animation-charging-framerate = 750

animation-discharging-foreground = ${colors.foreground-alt}
animation-discharging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
interval = 2
; Full path of temperature sysfs path
; Use `sensors` to find preferred temperature source, then run
; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done
; to find path to desired file
; Default reverts to thermal zone setting
hwmon-path = /sys/devices/pci0000:00/0000:00:18.3/hwmon/hwmon2/temp3_input
warn-temperature = 60

format = <label>
format-underline = #f50a4d
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%
label-warn-foreground = ${colors.secondary}

ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-foreground = ${colors.foreground-alt}

[module/powermenu]

type = custom/text
content = 
content-font= 3
;content-height = 90%:-100pt
;content-padding = 15pt
format-content-offset = 10px
content-background = ${colors.bg}
content-foreground = ${colors.secondary}

click-left = rofi -show power-menu -width 250 -lines 5
;type = custom/menu

;expand-right = true

;format-spacing = 1

;label-open = P
;label-open-foreground = ${colors.secondary}
;label-close =  cancel
;label-close-foreground = ${colors.secondary}
;label-separator = |
;label-separator-foreground = ${colors.foreground-alt}

;menu-0-0 = reboot
;menu-0-0-exec = rofi -show power-menu
;menu-0-2 = display off
;menu-0-2-exec = xset dpms force off

;menu-1-0 = cancel
;menu-1-0-exec = #powermenu.open.0
;menu-1-1 = reboot
;menu-1-1-exec =  shutdown -r now

;menu-2-0 = power off
;menu-2-0-exec =  shutdown now
;menu-2-1 = cancel
;menu-2-1-exec = #powermenu.open.0

[module/startmenu]
type = custom/menu

expand-left = true

format-spaceing = 1

label-open = 
label-open-font= 3

label-open-foreground = ${colors.secondary}
label-close =  cancel
label-close-foreground = ${colors.secondary}
label-separator = |
label-separator-foreground = ${colors.foreground-alt}

menu-0-0 = 
menu-0-0-font = 2
menu-0-0-exec = opera
menu-0-1 = 
menu-0-1-font = 2
menu-0-1-exec = emacsclient -c -a emacs -q --eval "(vterm \"/bin/bash\")"
menu-0-2 = E
menu-0-2-exec = emacsclient -c -a 'emacs'
menu-0-3 = Virt
menu-0-3-exec = virt-manager
menu-0-4 = joplin
menu-0-4-exec = ~/.joplin/Joplin.AppImage
[settings]
screenchange-reload = true
;compositing-background = xor
;compositing-background = screen
;compositing-foreground = source
;compositing-border = over
;pseudo-transparency = false

[global/wm]
margin-top = 5
margin-bottom = 5

; vim:ft=dosini

#+end_src

** Average Temperature Script

#+begin_src shell :tangle ./bin/averageTemp.sh
#!/bin/bash
cat /sys/devices/pci0000:00/0000:00:18.3/hwmon/hwmon2/temp3_input
#+end_src

* Rofi
** Rofi Config

#+begin_src css :tangle ./.config/rofi/config.rasi
configuration {
	modi: "window,drun,ssh,file-browser,power-menu:~/.dotfiles/bin/rofi-power-menu";
	width: 600; 
	lines: 8;
/*	columns: 1;*/
	font: "InconsolataGo Nerd Font Mono 16";
/*	bw: 1;*/
/*	location: 0;*/
/*	padding: 5;*/
/*	yoffset: 0;*/
/*	xoffset: 0;*/
/*	fixed-num-lines: true;*/
/*	show-icons: false;*/
/*	terminal: "rofi-sensible-terminal";*/
/*	ssh-client: "ssh";*/
/*	ssh-command: "{terminal} -e {ssh-client} {host} [-p {port}]";*/
/*	run-command: "{cmd}";*/
/*	run-list-command: "";*/
/*	run-shell-command: "{terminal} -e {cmd}";*/
/*	window-command: "wmctrl -i -R {window}";*/
/*	window-match-fields: "all";*/
	icon-theme: "Papirus" ;
/*	drun-match-fields: "name,generic,exec,categories,keywords";*/
/*	drun-categories: ;*/
/*	drun-show-actions: false;*/
/*	drun-display-format: "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";*/
/*	drun-url-launcher: "xdg-open";*/
/*	disable-history: false;*/
/*	ignored-prefixes: "";*/
/*	sort: false;*/
/*	sorting-method: "normal";*/
/*	case-sensitive: false;*/
/*	cycle: true;*/
/*	sidebar-mode: false;*/
/*	eh: 1;*/
/*	auto-select: false;*/
/*	parse-hosts: false;*/
/*	parse-known-hosts: true;*/
/*	combi-modi: "window,run";*/
/*	matching: "normal";*/
/*	tokenize: true;*/
/*	m: "-5";*/
/*	line-margin: 2;*/
/*	line-padding: 1;*/
/*	filter: ;*/
/*	separator-style: "dash";*/
/*	hide-scrollbar: false;*/
/*	fullscreen: false;*/
/*	fake-transparency: false;*/
/*	dpi: -1;*/
/*	threads: 0;*/
/*	scrollbar-width: 8;*/
/*	scroll-method: 0;*/
/*	fake-background: "screenshot";*/
/*	window-format: "{w}    {c}   {t}";*/
/*	click-to-exit: true;*/
/*	show-match: true;*/
/*	theme: ;*/
/*	color-normal: ;*/
/*	color-urgent: ;*/
/*	color-active: ;*/
/*	color-window: ;*/
/*	max-history-size: 25;*/
/*	combi-hide-mode-prefix: false;*/
/*	matching-negate-char: '-' /* unsupported */;*/
/*	cache-dir: ;*/
/*	window-thumbnail: false;*/
/*	drun-use-desktop-cache: false;*/
/*	drun-reload-desktop-cache: false;*/
/*	normalize-match: false;*/
/*	pid: "/run/user/1000/rofi.pid";*/
/*	display-window: ;*/
/*	display-windowcd: ;*/
/*	display-run: ;*/
/*	display-ssh: ;*/
/*	display-drun: ;*/
/*	display-combi: ;*/
/*	display-keys: ;*/
/*	display-file-browser: ;*/
/*	kb-primary-paste: "Control+V,Shift+Insert";*/
/*	kb-secondary-paste: "Control+v,Insert";*/
/*	kb-clear-line: "Control+w";*/
/*	kb-move-front: "Control+a";*/
/*	kb-move-end: "Control+e";*/
/*	kb-move-word-back: "Alt+b,Control+Left";*/
/*	kb-move-word-forward: "Alt+f,Control+Right";*/
/*	kb-move-char-back: "Left,Control+b";*/
/*	kb-move-char-forward: "Right,Control+f";*/
/*	kb-remove-word-back: "Control+Alt+h,Control+BackSpace";*/
/*	kb-remove-word-forward: "Control+Alt+d";*/
/*	kb-remove-char-forward: "Delete,Control+d";*/
/*	kb-remove-char-back: "BackSpace,Shift+BackSpace,Control+h";*/
/*	kb-remove-to-eol: "Control+k";*/
/*	kb-remove-to-sol: "Control+u";*/
	kb-accept-entry: "Control+j,Control+m,Return,KP_Enter";
/*	kb-accept-custom: "Control+Return";*/
/*	kb-accept-alt: "Shift+Return";*/
/*	kb-delete-entry: "Shift+Delete";*/
	kb-mode-next: "Shift+Right,Control+Tab";
	kb-mode-previous: "Shift+Left,Control+ISO_Left_Tab";
/*	kb-row-left: "Control+Page_Up";*/
/*	kb-row-right: "Control+Page_Down";*/
	kb-row-up: "Up,Control+p,ISO_Left_Tab";
	kb-row-down: "Down,Control+n";
	kb-row-tab: "Tab";
/*	kb-page-prev: "Page_Up";*/
/*	kb-page-next: "Page_Down";*/
/*	kb-row-first: "Home,KP_Home";*/
/*	kb-row-last: "End,KP_End";*/
/*	kb-row-select: "Control+space";*/
/*	kb-screenshot: "Alt+S";*/
/*	kb-ellipsize: "Alt+period";*/
/*	kb-toggle-case-sensitivity: "grave,dead_grave";*/
	kb-toggle-sort: "Alt+grave";
	kb-cancel: "Escape,Control+g,Control+bracketleft";
/*	kb-custom-1: "Alt+1";*/
/*	kb-custom-2: "Alt+2";*/
/*	kb-custom-3: "Alt+3";*/
/*	kb-custom-4: "Alt+4";*/
/*	kb-custom-5: "Alt+5";*/
/*	kb-custom-6: "Alt+6";*/
/*	kb-custom-7: "Alt+7";*/
/*	kb-custom-8: "Alt+8";*/
/*	kb-custom-9: "Alt+9";*/
/*	kb-custom-10: "Alt+0";*/
/*	kb-custom-11: "Alt+exclam";*/
/*	kb-custom-12: "Alt+at";*/
/*	kb-custom-13: "Alt+numbersign";*/
/*	kb-custom-14: "Alt+dollar";*/
/*	kb-custom-15: "Alt+percent";*/
/*	kb-custom-16: "Alt+dead_circumflex";*/
/*	kb-custom-17: "Alt+ampersand";*/
/*	kb-custom-18: "Alt+asterisk";*/
/*	kb-custom-19: "Alt+parenleft";*/
/*	kb-select-1: "Super+1";*/
/*	kb-select-2: "Super+2";*/
/*	kb-select-3: "Super+3";*/
/*	kb-select-4: "Super+4";*/
/*	kb-select-5: "Super+5";*/
/*	kb-select-6: "Super+6";*/
/*	kb-select-7: "Super+7";*/
/*	kb-select-8: "Super+8";*/
/*	kb-select-9: "Super+9";*/
/*	kb-select-10: "Super+0";*/
/*	ml-row-left: "ScrollLeft";*/
/*	ml-row-right: "ScrollRight";*/
/*	ml-row-up: "ScrollUp";*/
/*	ml-row-down: "ScrollDown";*/
	me-select-entry: "MousePrimary";
	me-accept-entry: "MouseDPrimary";
/*	me-accept-custom: "Control+MouseDPrimary";*/
}


#+end_src

** Rofi Theme

#+begin_src css :tangle ./.config/rofi/config.rasi
  @theme "/dev/null"
  ,*{
      /*selected-normal-foreground:  rgba( 255, 255, 255, 100% );
      foreground:                  rgba( 180, 180, 180, 100% );
      normal-foreground:           @foreground;
      alternate-normal-background: rgba( 47, 30, 46, 63% );
      red:                         rgba( 220, 50, 47, 100% );
      selected-urgent-foreground:  rgba( 239, 97, 85, 100% );
      blue:                        rgba( 38, 139, 210, 100% );
      urgent-foreground:           rgba( 239, 97, 85, 100% );
      alternate-urgent-background: rgba( 47, 30, 46, 18% );
      active-foreground:           rgba( 129, 91, 164, 100% );
      lightbg:                     rgba( 238, 232, 213, 100% );
      selected-active-foreground:  rgba( 129, 91, 164, 100% );
      alternate-active-background: rgba( 47, 30, 46, 18% );
      background:                  rgba( 47, 30, 46, 100% );
      bordercolor:                 rgba( 239, 97, 85, 21% );
      alternate-normal-foreground: @foreground;
      normal-background:           rgba( 47, 30, 46, 63% );
      lightfg:                     rgba( 88, 104, 117, 100% );
      selected-normal-background:  rgba( 129, 91, 164, 33% );
      border-color:                @foreground;
      spacing:                     2;
      separatorcolor:              rgba( 239, 97, 85, 18% );
      urgent-background:           rgba( 47, 30, 46, 15% );
      selected-urgent-background:  rgba( 129, 91, 164, 33% );
      alternate-urgent-foreground: @urgent-foreground;
      background-color:            rgba( 0, 0, 0, 0% );
      alternate-active-foreground: @active-foreground;
      active-background:           rgba( 47, 30, 46, 15% );
      selected-active-background:  rgba( 129, 91, 164, 33% );*/
      none:                                   rgba(0,0,0,0);
      foreground:                rgba(255, 42, 252, 1); 
      normal-foreground:          @foreground;
      urgent-foreground:          @foreground;
      active-foreground:          @foreground;
      alternate-normal-foreground:@foreground;
      alternate-active-foreground: @foreground;
      selected-normal-foreground: rgba(159, 172, 249, 0.8);
      selected-normal-background: rgba(50, 2, 150, 0.5);
      selected-active-foreground: @foreground;
      background:                 rgba(29, 18, 115, 0.9);
      background-color:           @none;
      normal-background:          rgba(172, 0, 99, 0.5);
      urgent-background:          @background;
      active-background:          rgba(200, 0, 170, 0.5);
      selected-active-background: rgba(172, 0, 99, 0.5);
      alternate-normal-background:rgba(175,  0,  145, 0.5);
      seperatorcolor:             rgba(117, 255, 214, 0.5);
      border-color:                @none;
      spacing:                     2;
      border: 0;
      margin: 0;
      padding: 0;
      spacing: 0;
  }
  window {
      background-color: @background;
      border:           1;
      padding:         20 0;
      border-radius:                  12px;
  }
  mainbox {
      border:  0;
      padding: 0;
  }
  message {
      border:       1px dash 0px 0px ;
      border-color: @separatorcolor;
      padding:      1px ;
  }
  textbox {
      text-color: @foreground;
  }
  listview {
      fixed-height: 0;
      border:       0px dash 0px 0px ;
      border-color: @seperatorcolor;
      spacing:      2px ;
      scrollbar:    false;
      padding:      1px 0px 0px ;
      elements:     5;
  }
  element {
      border:  0;
      padding: 1px ;
      children: [ element-icon, element-text ];
  }
  element-text {
      background-color: inherit;
      text-color:       inherit;
  }
  element-icon { 
      size: 36px ; 
  }


  element.normal.normal {
      background-color: @normal-background;
      text-color:       @normal-foreground;
  }
  element.normal.urgent {
      background-color: @urgent-background;
      text-color:       @urgent-foreground;
  }
  element.normal.active {
      background-color: @active-background;
      text-color:       @active-foreground;
  }
  element.selected.normal {
      background-color: @selected-normal-background;
      text-color:       @selected-normal-foreground;
  }
  element.selected.urgent {
      background-color: @selected-urgent-background;
      text-color:       @selected-urgent-foreground;
  }
  element.selected.active {
      background-color: @selected-active-background;
      text-color:       @selected-active-foreground;
  }
  element.alternate.normal {
      background-color: @alternate-normal-background;
      text-color:       @alternate-normal-foreground;
  }
  element.alternate.urgent {
      background-color: @alternate-urgent-background;
      text-color:       @alternate-urgent-foreground;
  }
  element.alternate.active {
      background-color: @alternate-active-background;
      text-color:       @alternate-active-foreground;
  }
  scrollbar {
      width:        8px ;
      border:       0;
      handle-width: 8px ;
      padding:      0;
  }
  mode-switcher {
      border:       0px dash 0px 0px ;
      border-color: @separatorcolor;
  }
  button.selected {
      background-color: @selected-normal-background;
      text-color:       @selected-normal-foreground;
  }
  inputbar {
      spacing:    0;
      text-color: @normal-foreground;
      padding:    1px ;
  }
  case-indicator {
      spacing:    0;
      text-color: @normal-foreground;
  }
  entry {
      spacing:    0;
      text-color: @normal-foreground;
  }
  prompt {
      spacing:    0;
      text-color: @normal-foreground;
  }
  inputbar {
      children:   [ prompt,textbox-prompt-colon,entry,case-indicator ];
  }
  textbox-prompt-colon {
      expand:     false;
      str:        ":";
      margin:     0px 0.3em 0em 0em ;
      text-color: @normal-foreground;
  }
#+end_src

** Rofi Menus
*** Power-menu

#+begin_src shell :tangle ./bin/rofi-power-menu :shebang "#!/bin/bash"
  #  /usr/bin/env bah

  # Script Original Version: https://github.com/jluttine/rofi-power-menu
  # This script defines just a mode for rofi instead of being a self-contained
  # executable that launches rofi by itself. This makes it more flexible than
  # running rofi inside this script as now the user can call rofi as one pleases.
  # For instance:
  #
  #   rofi -show powermenu -modi powermenu:./rofi-power-menu
  #
  # See README.md for more information.

  set -e
  set -u

  # All supported choices logout lockscreen hibernate
  all=(shutdown reboot suspend logout displayoff )

  # By default, show all (i.e., just copy the array)
  show=("${all[@]}")

  declare -A texts
  texts[lockscreen]="lock screen"
  texts[switchuser]="switch user"
  texts[logout]="log out"
  texts[suspend]="suspend"
  texts[hibernate]="hibernate"
  texts[reboot]="reboot"
  texts[shutdown]="shut down"
  texts[displayoff]="Display Off"

  declare -A icons
  icons[lockscreen]="\uf023"
  icons[switchuser]="\uf518"
  icons[logout]="\uf842"
  icons[suspend]="\uf9b1"
  icons[hibernate]="\uf7c9"
  icons[reboot]="\ufc07"
  icons[shutdown]="\uf011"
  icons[cancel]="\u00d7"
  icons[displayoff]=""

  declare -A actions
  actions[lockscreen]="loginctl lock-session ${XDG_SESSION_ID-}"
  #actions[switchuser]="???"
  actions[logout]="loginctl terminate-session ${XDG_SESSION_ID-}"
  actions[suspend]="systemctl suspend"
  actions[hibernate]="systemctl hibernate"
  actions[reboot]="systemctl reboot"
  actions[shutdown]="systemctl poweroff"
  actions[displayoff]="xset dpms force off"

  # By default, ask for confirmation for actions that are irreversible
  confirmations=(reboot shutdown logout)

  # By default, no dry run
  dryrun=false
  showsymbols=true

  function check_valid {
      option="$1"
      shift 1
      for entry in "${@}"
      do
          if [ -z "${actions[$entry]+x}" ]
          then
              echo "Invalid choice in $1: $entry" >&2
              exit 1
          fi
      done
  }

  # Parse command-line options
  parsed=$(getopt --options=h --longoptions=help,dry-run,confirm:,choices:,choose:,symbols,no-symbols --name "$0" -- "$@")
  if [ $? -ne 0 ]; then
      echo 'Terminating...' >&2
      exit 1
  fi
  eval set -- "$parsed"
  unset parsed
  while true; do
      case "$1" in
          "-h"|"--help")
              echo "rofi-power-menu - a power menu mode for Rofi"
              echo
              echo "Usage: rofi-power-menu [--choices CHOICES] [--confirm CHOICES]"
              echo "                       [--choose CHOICE] [--dry-run] [--symbols|--no-symbols]"
              echo
              echo "Use with Rofi in script mode. For instance, to ask for shutdown or reboot:"
              echo
              echo "  rofi -show menu -modi \"menu:rofi-power-menu --choices=shutdown/reboot\""
              echo
              echo "Available options:"
              echo "  --dry-run          Don't perform the selected action but print it to stderr."
              echo "  --choices CHOICES  Show only the selected choices in the given order. Use / "
              echo "                     as the separator. Available choices are lockscreen, logout,"
              echo "                     suspend, hibernate, reboot and shutdown. By default, all"
              echo "                     available choices are shown."
              echo "  --confirm CHOICES  Require confirmation for the gives choices only. Use / as"
              echo "                     the separator. Available choices are lockscreen, logout,"
              echo "                     suspend, hibernate, reboot and shutdown. By default, only"
              echo "                     irreversible actions logout, reboot and shutdown require"
              echo "                     confirmation."
              echo "  --choose CHOICE    Preselect the given choice and only ask for a confirmation"
              echo "                     (if confirmation is set to be requested). It is strongly"
              echo "                     recommended to combine this option with --confirm=CHOICE"
              echo "                     if the choice wouldn't require confirmation by default."
              echo "                     Available choices are lockscreen, logout, suspend,"
              echo "                     hibernate, reboot and shutdown."
              echo "  --[no-]symbols     Show Unicode symbols or not. Requires a font with support"
              echo "                     for the symbols. Use, for instance, fonts from the"
              echo "                     Nerdfonts collection. By default, they are shown"
              echo "  -h,--help          Show this help text."
              exit 0
              ;;
          "--dry-run")
              dryrun=true
              shift 1
              ;;
          "--confirm")
              IFS='/' read -ra confirmations <<< "$2"
              check_valid "$1" "${confirmations[@]}"
              shift 2
              ;;
          "--choices")
              IFS='/' read -ra show <<< "$2"
              check_valid "$1" "${show[@]}"
              shift 2
              ;;
          "--choose")
              # Check that the choice is valid
              check_valid "$1" "$2"
              selectionID="$2"
              shift 2
              ;;
          "--symbols")
              showsymbols=true
              shift 1
              ;;
          "--no-symbols")
              showsymbols=false
              shift 1
              ;;
          "--")
              shift
              break
              ;;
          ,*)
              echo "Internal error" >&2
              exit 1
              ;;
      esac
  done

  # Define the messages after parsing the CLI options so that it is possible to
  # configure them in the future.

  function write_message {
      icon="<span font_size=\"medium\">$1</span>"
      text="<span font_size=\"medium\">$2</span>"
      if [ "$showsymbols" = "true" ]
      then
          echo -n "\u200e$icon \u2068$text\u2069"
      else
          echo -n "$text"
      fi
  }

  function print_selection {
      echo -e "$1" | $(read -r -d '' entry; echo "echo $entry")
  }

  declare -A messages
  declare -A confirmationMessages
  for entry in "${all[@]}"
  do
      messages[$entry]=$(write_message "${icons[$entry]}" "${texts[$entry]^}")
  done
  for entry in "${all[@]}"
  do
      confirmationMessages[$entry]=$(write_message "${icons[$entry]}" "Yes, ${texts[$entry]}")
  done
  confirmationMessages[cancel]=$(write_message "${icons[cancel]}" "No, cancel")

  if [ $# -gt 0 ]
  then
      # If arguments given, use those as the selection
      selection="${@}"
  else
      # Otherwise, use the CLI passed choice if given
      if [ -n "${selectionID+x}" ]
      then
          selection="${messages[$selectionID]}"
      fi
  fi

  # Don't allow custom entries
  echo -e "\0no-custom\x1ftrue"
  # Use markup
  echo -e "\0markup-rows\x1ftrue"

  if [ -z "${selection+x}" ]
  then
      echo -e "\0prompt\x1fPower menu"
      for entry in "${show[@]}"
      do
          echo -e "${messages[$entry]}\0icon\x1f${icons[$entry]}"
      done
  else
      for entry in "${show[@]}"
      do
          if [ "$selection" = "$(print_selection "${messages[$entry]}")" ]
          then
              # Check if the selected entry is listed in confirmation requirements
              for confirmation in "${confirmations[@]}"
              do
                  if [ "$entry" = "$confirmation" ]
                  then
                      # Ask for confirmation
                      echo -e "\0prompt\x1fAre you sure"
                      echo -e "${confirmationMessages[$entry]}\0icon\x1f${icons[$entry]}"
                      echo -e "${confirmationMessages[cancel]}\0icon\x1f${icons[cancel]}"
                      exit 0
                  fi
              done
              # If not, then no confirmation is required, so mark confirmed
              selection=$(print_selection "${confirmationMessages[$entry]}")
          fi
          if [ "$selection" = "$(print_selection "${confirmationMessages[$entry]}")" ]
          then
              if [ $dryrun = true ]
              then
                  # Tell what would have been done
                  echo "Selected: $entry" >&2
              else
                  # Perform the action
                  ${actions[$entry]}
              fi
              exit 0
          fi
          if [ "$selection" = "$(print_selection "${confirmationMessages[cancel]}")" ]
          then
              # Do nothing
              exit 0
          fi
      done
      # The selection didn't match anything, so raise an error
      echo "Invalid selection: $selection" >&2
      exit 1
  fi
#+end_src

* Bspwm
** bspwmrc

#+begin_src shell :tangle ./.config/bspwm/bspwmrc :shebang "#!/bin/sh"
sxhkd & polybar example --config=~/.config/polybar/config.ini &


bspc monitor -d I II III IV V VI VII VIII IX X

bspc config border_width         2
bspc config window_gap          12

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true

bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off

#+end_src

** sxhkdrc

#+begin_src conf :tangle ./.config/sxhkd/sxhkdrc
# 
# wm independent hotkeys
#

# terminal emulator
super + Return
	urxvt

# program launcher
super + @space
	rofi -show drun -show-icons

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

#+end_src

* Install
#+begin_src shell :tangle ./install.sh :shebang "#!/bin/bash"

  export UBUNTU_PACKEGES="zsh exa screen emacs aspell-en dvipng texlive-latex-extra cmake"
  export ARCH_PACKEGES="zsh exa screen emacs aspell-en texlive-bin texlive-latexextra cmake"
  export UI_PACKAGES="polybar nitrogen"
  export PROD_PACKAGES="blender inkscape krita"
  export DOTFILES_DIR=~/.dotfiles
  #export DOTFILES_DIR="/home/rampedindent/.dotfiles"

  # Check if computer is ubuntu
  # Determine OS platform
  # https://askubuntu.com/a/459425
  UNAME=$(uname | tr "[:upper:]" "[:lower:]")
  # If Linux, try to determine specific distribution
  if [ "$UNAME" == "linux" ]; then
      # If available, use LSB to identify distribution
      if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
          export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
          # Otherwise, use release info file
      else
          export DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
      fi
  fi
  # For everything else (or if above failed), just use generic identifier
  #[ "$DISTRO" == "" ] && export DISTRO=$UNAME
  echo $DISTRO
  unset UNAME
  echo $DOTFILES_DIR
  if [ "$DISTRO" == "Ubuntu" ]; then
      # sudo apt install exa
      # sudo apt install screen
      echo "Updating to newest Ubuntu Version"
      #sudo apt install update-manager-core ubuntu-release-upgrader-core
      #sudo sed -i '/Prompt=lts/c\Prompt=normal' /etc/update-manager/release-upgrades
      #sudo apt update && sudo apt dist-upgrade
      echo "Ubuntu version upto date"
      echo "Installing git and stow"
      #sudo apt update && sudo apt install git stow
      # Make Sure Dotfiles dir is up to date and installed
      echo "Making Sure Dotfiles dir is up to date and downloaded"
      if [ -d "$DOTFILES_DIR" ]; then
          echo "Updating Dotfiles"
          git pull 
      else
          echo "Cloning Dotfiles"
          #git clone https://github.com/RampedIndent/dotfiles.git $DOTFILES_DIR
      fi
      echo "Changing to Dotfiles Dir"
      cd $DOTFILES_DIR
      echo "Using stow to create symbolic links for the items in the Dotfiles Dir"
      stow .

  fi


  if [ "$DISTRO" == "ArcoLinux" ]; then
      echo "Updating to newest Arch Version"
      sudo pacman -Syu
      echo "Arch packages are upto date"
      echo "Installing git and stow"
      sudo pacman -S git stow --needed
      # Make Sure Dotfiles dir is up to date and installed
      echo "Making Sure Dotfiles dir is up to date and downloaded"
      if [ -d "$DOTFILES_DIR" ]; then
          echo "Updating Dotfiles"
          git pull 
      else
          echo "Cloning Dotfiles"
          git clone https://github.com/RampedIndent/dotfiles.git $DOTFILES_DIR
      fi
      echo "Changing to Dotfiles Dir"
      cd $DOTFILES_DIR
      echo "Using stow to create symbolic links for the items in the Dotfiles Dir"
      stow .
      echo "Installing Terminal Packages"
      sudo pacman -S $ARCH_PACKEGES --needed
      echo "Installing UI Packages"
      sudo pacman -S $UI_PACKEGES --needed

  fi

  OMZ_DIR=~/.oh-my-zsh
  if ! [ -d "$OMZ_DIR" ]; then
      echo "Installing Oh My ZSH"
      sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" 
  fi

  P10K_DIR=~/powerlevel10k
  if ! [ -d "$P10K_DIR" ]; then
      echo "Installing zsh Powerline10k"
      git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
  fi


  #if [ -d "~/powerline10k" ]; then
  #    echo "Installing zsh Powerline10k"
  #    git clone --depth=1 https://github.com/ryanoasis/nerd-fonts.git ~/nerdfonts
  #fi

  FILE=~/.ssh/id_$HOSTNAME
  if [ -f "$FILE" ]; then
      echo "$FILE exists."
  else 
      echo "$FILE does not exist."
      ssh-keygen -t ed25519 -C "RampedIndent@gmail.com" -f $FILE
      echo "Run to check if ssh-agent is running" 
      echo "eval \"\$(ssh-agent -s)\""
      echo "ssh-add $FILE"
  fi
#+end_src

